# This adds additional functionality to the zsh above and beyond the default settings

# $0 does not work if this is symlinked. Essentially the script is not invoked or sourced
# see http://stackoverflow.com/questions/9901210/bash-source0-equivalent-in-zsh
ZSHRC=${ZDOTDIR-~}/.zshrc
ZSH_FOLDER=$(dirname $(readlink -e $ZSHRC))

PATH=$HOME/bin:$HOME/share/perl6/site/bin:$PATH

# The following lines were added by compinstall
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _list _expand _complete _ignored _match
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd .. directory
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 0
zstyle ':completion:*' menu select=2
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl true
zstyle ':completion:*' verbose true
zstyle :compinstall filename "$HOME/.zshrc"

fpath=(${ZSH_FOLDER}/autocomplete $fpath)

autoload -Uz compinit
compinit
# End of lines added by compinstall

# zmv allows for mass renames. Use -n to test the rename. Example:
# zmv '(*)-HDTV-WAKKA-WAKKA.(*)' '$1.$2'
autoload -U zmv

# This allows exclusions and the like in the pattern expansion
setopt extended_glob

# Report the status of background jobs immediately, rather than waiting until
# just before printing a prompt.
setopt notify

###############################
# make less more friendly for #
# non-text input files, see   #
# lesspipe(1)                 #
###############################
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

###########
# HISTORY #
###########

HISTFILE=~/.histfile
HISTSIZE=1000000
SAVEHIST=1000000

# This option both imports new commands from the history file, and also causes
# your typed commands to be appended to the history file (the latter is like
# specifying INC_APPEND_HISTORY). The history lines are also output with
# timestamps ala EXTENDED_HISTORY (which makes it easier to find the spot where
# we left off reading the file after it gets re-written).
setopt share_history
unsetopt inc_append_history
setopt hist_save_no_dups
setopt hist_ignore_all_dups

####################
# MODULES AND PATH #
####################

# load antigen.
. ${ZSH_FOLDER}/antigen/antigen.zsh
antigen-bundle zsh-users/zsh-syntax-highlighting
antigen-bundle Tarrasch/zsh-functional
antigen-bundle zsh-users/zsh-history-substring-search
antigen-bundle bobthecow/git-flow-completion
antigen-apply

# Load the fasd completion system.
# See https://github.com/clvv/fasd
PATH=$PATH:${ZSH_FOLDER}/packages/fasd
eval "$(${ZSH_FOLDER}/packages/fasd/fasd --init auto)"

# add bin folder to path

if [[ -e $HOME/.anyenv ]]; then
    export PATH="$HOME/.anyenv/bin:$PATH"
    eval "$(anyenv init -)"
fi

if [[ -e $HOME/.anyenv/envs/plenv ]]; then
    eval "$(plenv init -)"
fi

if [[ -e $HOME/.anyenv/envs/rbenv ]]; then
    eval "$(rbenv init -)"
fi

if [[ -e $HOME/.anyenv/envs/ndenv ]]; then
    eval "$(ndenv init -)"
fi

if [[ -e $HOME/.anyenv/envs/jenv ]]; then
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
    export JAVA_HOME="$(jenv javahome)"
fi

if [[ -e $HOME/.rakudobrew ]]; then
    export PATH="$HOME/.rakudobrew/bin:$PATH"
fi

export GATLING_HOME="/usr/lib/gatling"

######################
# PROMPT AND ALIASES #
######################

. ${ZSH_FOLDER}/config/aliases
. ${ZSH_FOLDER}/config/prompt
. ${ZSH_FOLDER}/config/keymapping

# load local specific file if it exists
if [[ -e $HOME/.zshlocalrc ]]; then
    . $HOME/.zshlocalrc
fi

################
# EDITOR STUFF #
################

export VISUAL=/usr/bin/vim
export EDITOR=/usr/bin/vim
export SVN_EDITOR=/usr/bin/vim
export GIT_EDITOR=/usr/bin/vim
export LESS=ir

# vim: set ai et sw=4 syntax=zsh :
