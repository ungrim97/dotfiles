" Guard against loading this twice. This does mean you cannot do:
" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1

""""""""""""""""""""""""""""
" PRE PLUGIN CONFIGURATION "
""""""""""""""""""""""""""""

let g:NumberToggleTrigger="<leader>n"

"""""""""""""
" NEOBUNDLE "
"""""""""""""

if has('vim_starting')
    " install neobundle stuff!
    " inspired by: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
    if !filereadable(expand('~/.vim/bundle/neobundle.vim/README.md'))
        echo "Installing NeoBundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    endif

    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \     'windows' : 'make -f make_mingw32.mak',
  \     'cygwin'  : 'make -f make_cygwin.mak',
  \     'mac'     : 'make -f make_mac.mak',
  \     'unix'    : 'make -f make_unix.mak',
  \     },
  \ }

NeoBundle "Shougo/unite.vim"
NeoBundle "Shougo/vimproc.vim"
if ( v:version > 704 || ( v:version > 703 && has( 'patch584' ) ) ) && has( 'python' )
    NeoBundle "Valloric/YouCompleteMe"
endif

NeoBundle "actionshrimp/vim-xpath.git"
NeoBundle "altercation/vim-colors-solarized.git"
NeoBundle "bronson/vim-visual-star-search"
NeoBundle "dart-lang/dart-vim-plugin.git"
NeoBundle "godlygeek/tabular.git"
NeoBundle "groenewege/vim-less.git"
NeoBundle "hail2u/vim-css3-syntax.git"
NeoBundle "hallettj/jslint.vim.git"
NeoBundle "jeffkreeftmeijer/vim-numbertoggle"
NeoBundle "jnwhiteh/vim-golang.git"
NeoBundle "majutsushi/tagbar.git"
NeoBundle "mileszs/ack.vim.git"
NeoBundle "scrooloose/nerdtree.git"
NeoBundle "scrooloose/syntastic.git"
NeoBundle "terryma/vim-multiple-cursors"
NeoBundle "tpope/vim-fugitive.git"
NeoBundle "tpope/vim-markdown.git"
NeoBundle "tpope/vim-repeat"
NeoBundle "tpope/vim-sensible.git"
NeoBundle "tpope/vim-surround.git"
NeoBundle "tpope/vim-unimpaired.git"
NeoBundle "vim-perl/vim-perl"
NeoBundle "vim-scripts/kwbdi.vim.git"
NeoBundle "vim-scripts/nginx.vim.git"
NeoBundleCheck

call neobundle#end()
""""""""""""
" SETTINGS "
""""""""""""

set ignorecase
set smartcase

syntax on
filetype plugin indent on

set modeline
set expandtab
set tabstop=4
set shiftwidth=4

" Highlight searches to allow refinement
" Turn off for the current search with :nohlsearch (or <leader>h)
set hls

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs

" I tried lots of different things (like putting swap files in /tmp) but
" really, just die swap files. DIE!
set noswapfile

" Highlight from the start of the file
" :help autocmd to learn more
" BufEnter    - After entering a buffer.
" BufRead     - When starting to edit a new buffer, after reading the file
"               into the buffer, before executing the modelines.
" BufWinEnter - After a buffer is displayed in a window.
" For some reason, :source $MYVIMRC can cause syntax failures, but switching
" to an existing buffer no longer causes such issues.
autocmd BufEnter,BufRead,BufWinEnter * :syntax sync fromstart

" highlight tabs & trailing spaces
set list listchars=tab:\ \ ,trail:Â·

" Always have 5 lines around the cursor
set scrolloff=5
set sidescrolloff=5

" No more complaints about unsaved buffers. Man up.
set hidden

set cursorline
set cursorcolumn

""""""""
" UNDO "
""""""""

" The settings from vim-sensible no longer appear to apply. May have to just
" rip them out directly into this vimrc, but for now the undo history has
" proved its worth.
"
" Not 100% on when the undofile functionality was included, but it is
" available from at least 7.3

if ( v:version >= 703 )
    let undodir=expand('~/.vim/undo')

    if !isdirectory(undodir)
        silent !mkdir -p ~/.vim/undo
    endif

    set undofile
    set undodir=$HOME/.vim/undo
    set undolevels=1000
    set undoreload=10000
endif

""""""""""
" COLORS "
""""""""""

" Convince Vim it can use 256 colors inside Gnome Terminal.
" Needs CSApprox plugin
set t_Co=256

let g:solarized_termcolors=256
set background=dark
colorscheme blackboard

""""""""""""""
" KEYMAPPING "
""""""""""""""

" Make mouse middle click paste without formatting it.
map <MouseMiddle> <Esc>"*p

" Ctrl-J now adds a newline (without going into insert), so it is the reverse
" of Shift-J. See:
" http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nnoremap <C-J> a<CR><Esc>k$

" \f now formats perl scripts with perltidy
nnoremap <leader>f :1,$!perltidy<CR>

" \l now Data::Dumps the current WORD
" nnoremap <C-L> diWi{ print Data::Dumper->new( [ <Esc>p$a ] )->Dump; <Esc>p$a }<Esc>
nnoremap <leader>l diWiprint Data::Dumper->new( [ <C-R>" ] )->Dump;<Esc>

" \s syncs syntax from start
nnoremap <leader>s :syntax sync fromstart<CR>

" \= and \=> do :Tabularize stuff
nnoremap <leader>=> :Tabularize /=><CR>
nnoremap <leader>=  :Tabularize /=<CR>

" Home key
map <esc>OH <home>
cmap <esc>OH <home>
imap <esc>OH <home>
" End Key
map <esc>OF <end>
cmap <esc>OF <end>
imap <esc>OF <end>
" \p changes paste mode.
nnoremap <leader>p :set paste!<CR>

"""""""""""""""""""""""""
" FUNCTION KEY MAPPINGS "
"""""""""""""""""""""""""

" F1 turns off highlighting for the current search
let hlstate=0
nnoremap <F1> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate<cr>

" F2 toggles line numbers
nnoremap <F2> :set invnumber<CR>

" F4 Git Blame
nnoremap <F4> :Gblame<CR>

nnoremap <F5> :set cursorline! cursorcolumn!<CR>

"! Toggle Tags with <F8>, Nerdtree with <F7>
nnoremap <F7> :NERDTreeToggle<CR><C-W>l
nnoremap <F8> :TagbarToggle<CR>

" F11 Remove trailing whitespace
nnoremap <F11> :%s/\s\s*$//<CR>

"""""""""""""""""""
" BUNDLE SETTINGS "
"""""""""""""""""""

set rtp+=~/.powerline/powerline/bindings/vim

" http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
let NERDTreeIgnore = ['\.pyc$']
" vim-multiple-cursors default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Unite settings from
" http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/
nnoremap <C-P>     :Unite file_rec/async<CR>
nnoremap <leader>/ :Unite grep:.<CR>
nnoremap <leader>s :Unite -quick-match buffer<CR>

let g:syntastic_python_checkers=['python', 'pyflakes', 'pep8', 'pylint']

" Restore cursor location
augroup resCur
  au BufWinLeave * mkview
  au VimEnter * silent loadview
augroup END


"""""""""""""""""""""""""""
" CUSTOM RUNTIME SETTINGS "
"""""""""""""""""""""""""""

function! LoadCustomSettings()
if filereadable("./vimrc")
    source ./vimrc
endif
endfunction
autocmd BufEnter * :call LoadCustomSettings()
