""""""""""""
" PATHOGEN "
""""""""""""

call pathogen#infect()
call pathogen#helptags()

""""""""""""
" SETTINGS "
""""""""""""

set ignorecase
set smartcase

syntax on
filetype plugin indent on

set modeline
set expandtab
set tabstop=4
set shiftwidth=4

" Highlight searches to allow refinement
" Turn off for the current search with :nohlsearch (or <leader>h)
set hls 

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs

" I tried lots of different things (like putting swap files in /tmp) but
" really, just die swap files. DIE!
set noswapfile

" Highlight from the start of the file
" :help autocmd to learn more
" BufEnter    - After entering a buffer.
" BufRead     - When starting to edit a new buffer, after reading the file
"               into the buffer, before executing the modelines.
" BufWinEnter - After a buffer is displayed in a window.
" For some reason, :source $MYVIMRC can cause syntax failures, but switching
" to an existing buffer no longer causes such issues.
autocmd BufEnter    * :syntax sync fromstart
autocmd BufRead     * :syntax sync fromstart
autocmd BufWinEnter * :syntax sync fromstart

" Show trailing whitepace and spaces before a tab:
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

" Show tabs that are not at the start of a line:
autocmd Syntax * syn match ExtraWhitespace /[^\t]\zs\t\+/

""""""""""
" COLORS "
""""""""""

" Convince Vim it can use 256 colors inside Gnome Terminal.
" Needs CSApprox plugin
set t_Co=256

set background=dark
colorscheme telstar

""""""""""""""
" KEYMAPPING "
""""""""""""""

" Make mouse middle click paste without formatting it.
map <MouseMiddle> <Esc>"*p

" Ctrl-J now adds a newline (without going into insert), so it is the reverse
" of Shift-J. See:
" http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nnoremap <C-J> a<CR><Esc>k$

" \f now formats perl scripts with perltidy
nnoremap <leader>f :1,$!perltidy<CR>

" \l now Data::Dumps the current WORD
" nnoremap <C-L> diWi{ print Data::Dumper->new( [ <Esc>p$a ] )->Dump; <Esc>p$a }<Esc>
nnoremap <leader>l diWiprint Data::Dumper->new( [ <C-R>" ] )->Dump;<Esc>

" \s syncs syntax from start
nnoremap <leader>s :syntax sync fromstart<CR>

" \= and \=> do :Tabularize stuff
nnoremap <leader>=> :Tabularize /=><CR>
nnoremap <leader>=  :Tabularize /=<CR>

" \h turns off highlighting for the current search
nnoremap <leader>h  :nohls<CR>

"""""""""""""""""""
" BUNDLE SETTINGS "
"""""""""""""""""""

set rtp+=~/.powerline/powerline/bindings/vim

" http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
let NERDTreeIgnore = ['\.pyc$']

" Toggle Tags with <F8>, Nerdtree with <F7>
nnoremap <F7> :NERDTreeToggle<CR><C-W>l
nnoremap <F8> :TagbarToggle<CR>

" CtrlP make <C-R> fetch the specified register
" If you want regex mode then tough cookies
let g:ctrlp_prompt_mappings = {
            \    'PrtInsert("r")': ['<c-r>'],
            \    'ToggleRegex()':  []
            \}

" expand('<cfile>') will return the 'current file name under cursor' (like
" gf). Need to find a way to make a mapping to pass the gf file to CtrlP.

"""""""""""""""""""""""""""
" CUSTOM RUNTIME SETTINGS "
"""""""""""""""""""""""""""

function! LoadCustomSettings()
if filereadable("./vimrc")
    source ./vimrc
endif
endfunction
autocmd BufEnter * :call LoadCustomSettings()
