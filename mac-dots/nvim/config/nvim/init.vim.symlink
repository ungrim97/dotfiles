" Guard against loading this twice. This does mean you cannot do:
" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1

function s:Main() abort
    call s:LoadPlugins()
    call s:LoadKeymaps()
    call s:LoadSettings()

endfunction

function s:LoadPlugins() abort
    if s:CannotLoadPlugins()
        return 0
    endif

    call s:PrepareForPluginLoad()

    if s:PluginLoaderMissing()
        call s:InstallPluginLoader()
    endif

    call plug#begin()

    call s:RegisterPlugins()

    call s:InstallPlugins()

    call plug#end()

    call s:ConfigurePlugins()

    call s:ConfigureCustomFiletypes()

    return 1
endfunction

function s:CannotLoadPlugins() abort
    return version <= 701
endfunction

function s:PluginLoaderMissing() abort
    return !filereadable(expand('~/.local/share/nvim/site/autoload/plug.vim'))
endfunction

function s:CanUsePython() abort
    return has('python') || has('python3')
endfunction

function s:VersionSufficientToUseYouCompleteMe() abort
    return ( v:version > 704 || ( v:version > 703 && has('patch584') ) )
endfunction

function s:InstallPlugins() abort
    " The g:plugs map maps the plugin name to the settings for it.
    " The most relevant setting for this is the 'dir' setting which is the
    " destination folder.
    " Example (truncated) output of ':echo g:plugs':
    " {'vim-surround': {'uri': 'https://github.com/tpope/vim-surround.git', 'dir': '/home/matthew/.vim/plugged/vim-surround/', 'frozen': 0, 'branch': 'master'},...

    for spec in values(g:plugs)
        if !isdirectory(spec.dir)
            PlugInstall
            return
        endif
    endfor

    return
endfunction

function s:PrepareForPluginLoad() abort
endfunction

function s:InstallPluginLoader() abort
    echo "Installing Vim Plug.."
    echo ""
    silent !mkdir --parents ~/.local/share/nvim/site/autoload
    silent !curl --fail --location --output ~/.local/share/nvim/site/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endfunction

function s:RegisterPlugins() abort
    " Each of these is registered in the g:plugs map.
    Plug 'Shougo/vimproc.vim', {'do' : 'make'}

    " Visual Select search
    Plug 'bronson/vim-visual-star-search'

    " Line up code
    Plug 'godlygeek/tabular'

    " Language Packs
    Plug 'sheerun/vim-polyglot'

    " Git commands (e.g. :GBlame)
    Plug 'tpope/vim-fugitive'

    " Git diff in gutter
    Plug 'airblade/vim-gitgutter'

    " Support use of . in Surround plugin
    Plug 'tpope/vim-repeat'

    " Standard defaults
    Plug 'tpope/vim-sensible'

    " Easy manipulation of surround chars e.g () {} []
    Plug 'tpope/vim-surround'

    " Handle ANSI Character handling
    Plug 'vim-scripts/AnsiEsc.vim'

    " Set indentation automagically
    Plug 'tpope/vim-sleuth'

    " Airline (Its faster than powerline in vim)
    Plug 'vim-airline/vim-airline'

    " File Tree
    Plug 'preservim/nerdtree'

    " LSP Support (Completion, GOTO Definition etc)
    Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': { -> coc#util#install()}}

    " Some themes for airline and bufferline
    Plug 'vim-airline/vim-airline-themes'

    " Themes for vim
    Plug 'rafi/awesome-vim-colorschemes'

endfunction

function s:ConfigurePlugins() abort
    " Coc Extentions
    let g:coc_global_extensions=['coc-json', 'coc-tsserver', 'coc-html', 'coc-css', 'coc-eslint', 'coc-prettier']

    " Coc config
    set shortmess+=c
    set cmdheight=2
    set updatetime=300

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Airline
    let g:airline_powerline_fonts = 0
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#fugutive#enabled = 1
    let g:airline#extensions#coc#enabled = 1
endfunction

function s:ConfigureCustomFiletypes() abort
    " Set all .t files to be perl type
    autocmd BufNewFile,BufReadPost *.t set filetype=perl

    " Set markdown filetype and spelling
    " Required otherwise .md is modulo-2 filetype
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
endfunction

function s:LoadKeymaps() abort
    call s:LoadCustomKeymaps()
    call s:LoadFunctionKeymaps()
endfunction

function s:LoadCustomKeymaps() abort
    " Make mouse middle click paste without formatting it.
    map <MouseMiddle> <Esc>"*p

    " Ctrl-J now adds a newline (without going into insert), so it is the reverse
    " of Shift-J. See:
    " http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
    nnoremap <C-J> a<CR><Esc>k$

    " \= and \=> do :Tabularize stuff
    nnoremap <leader>=> :Tabularize /=><CR>
    nnoremap <leader>=  :Tabularize /=<CR>

    " \p changes paste mode.
    nnoremap <leader>p :set paste!<CR>

    " Map for rename current word
    nmap <silent>rn <Plug>(coc-rename)

    " Map keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    autocmd CursorHold * silent :call CocActionAsync('doHover')

endfunction

function s:LoadFunctionKeymaps() abort
    " F1 turns off highlighting for the current search
    let g:hlstate=0
    nmap <F1> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate<cr>

    " F2 Run linter fixup
    nmap <F2> <Plug>(coc-fix-current)

    " F3
    nmap <silent> <F3> <Plug>(coc-definition)

    " F4 Git Blame
    nmap <F4> :Gblame<CR>

    " F5 toggles Cursorline and Cursorcolum markers
    nmap <F5> :set cursorline! cursorcolumn!<CR>

    " F6

    " F7

    " F8

    " F9

    " F10
    nmap <F10> :NERDTreeToggle<CR>

    " F11 Remove trailing whitespace
    nmap <F11> :%s/\s\s*$//<CR>

    " F12
endfunction

function s:LoadSettings() abort
    colorscheme challenger_deep

    set termguicolors                   " Set true colour
    set clipboard=unnamed,unnamedplus   " Allow the + register to copy between vim instances
    set encoding=utf-8                  " Necessary to show Unicode glyphs
    set hidden                          " Stop the 'unsaved changes' warning when changing buffers
    set hlsearch                        " Highlight searches. Use <F1> to turn off
    set laststatus=2                    " Always show the statusline
    set list listchars=tab:\ \ ,trail:Â· " Highlight tabs & trailing spaces
    set modeline
    set noswapfile                      " More annoying than useful
    set scrolloff=5                     " Always have 5 rows around the cursor
    set sidescrolloff=5                 " Always have 5 columns around the cursor
    set linebreak                       " Perform word wrapping without breaking words
    set ignorecase                      " Case insensitive searching
    set smartcase                       " Unless you use case in your search
    set mouse=a                         " Support mouse usage

    let perl_include_pod = 1

    " Allow // comments in JSON files (jsonc)
    autocmd FileType json syntax match Comment +\/\/.\+$+

    call s:ConfigureUndoFiles()

    " Restore cursor location
    augroup resCur
      au BufWinLeave * mkview
      au VimEnter * silent! loadview
    augroup END
endfunction

" Persistent undo between sessions. Very useful!
function s:ConfigureUndoFiles()
    call s:MakeUndoDirectoryIfMissing()

    set undofile
    set undodir=$HOME/.local/share/nvim/undo
    set undolevels=1000
    set undoreload=10000
endfunction

function s:MakeUndoDirectoryIfMissing()
    let undodir=expand('~/.local/share/nvim/undo')

    if !isdirectory(undodir)
        silent !mkdir -p ~/.local/share/nvim/undo
    endif
endfunction

call s:Main()

" vi:filetype=vim
